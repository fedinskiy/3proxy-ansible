---
- hosts: all
  gather_facts: no
  pre_tasks:
    - setup:
        filter: ansible_env
  vars:
    proxy_version: 0.8.10
    proxy_port: 49801
    additional_proxy_port: 88
    ansible_path: "{{ansible_env.HOME}}/ansible/"
    task_path: "{{ansible_path}}3proxy/"
    source_path: "{{task_path}}source/"

    app_path: /usr/bin/
    app_file: "{{app_path}}3proxy"
    config_path: /etc/3proxy/
    service_name: 3proxyinit
    init_file: "/etc/init.d/{{service_name}}"
    config_file: "{{config_path}}3proxy.cfg"
    log_path: /var/log/3proxy/
    users_file: "{{config_path}}.proxyauth"
    group: proxy3
    user: proxy3

    compile_path: "{{source_path}}3proxy-{{proxy_version}}/"
    archive_path: "{{source_path}}source.tgz"
    download_url: "https://github.com/z3APA3A/3proxy/archive/{{proxy_version}}.tar.gz"
  tasks:
  - name: check that host is accessible
    ping:
  - name: create system group
    group:
      name: "{{group}}"
      system: yes
    become: yes
  - name: create system user
    user:
      name: "{{user}}"
      group: "{{group}}"
      create_home: no
      system: yes
    become: yes
    register: userinfo
  - debug: var=userinfo
  - set_fact:
      user_id: "{{userinfo.uid}}"
      group_id: "{{userinfo.group}}"
  - debug: var=user_id
  - debug: var=group_id
  - name: create folder for ansible scripts
    file:
      path: "{{ansible_path}}"
      state: directory
  - name: create folder for executable
    file:
      path: "{{app_path}}"
      state: directory
  - name: create configuration folder
    file:
      path: "{{config_path}}"
      state: directory
      owner: "{{user}}"
      group: "{{group}}"
    become: yes
  - name: create log folder
    file:
      path: "{{log_path}}"
      state: directory
      owner: "{{user}}"
      group: "{{group}}"
    become: yes
  - name: create folder for task
    file:
      path: "{{task_path}}"
      state: directory
  - name: create source code folder
    file:
      path: "{{source_path}}"
      state: directory
  - name: download source code
    get_url:
      url: "{{download_url}}"
      dest: "{{archive_path}}"
  - name: unpack source code
    unarchive:
      remote_src: yes
      src: "{{archive_path}}"
      dest: "{{source_path}}"
  - name: compile source code
    make:
      chdir: "{{compile_path}}"
      file: Makefile.Linux #TODO сделать контексто-зависимым
  - name: copy executable to required place
    copy:
      dest: "{{app_file}}"
      src: "{{compile_path}}/src/3proxy"
      remote_src: yes
      owner: "{{user}}"
      group: "{{group}}"
      mode: "u=rwx,go=r"
    become: yes
  - name: copy config file
    template:
      src: templates/3proxy.cfg.j2
      dest: "{{config_file}}"
      owner: "{{user}}"
      group: "{{group}}"
      mode: "u=rw,g=rw,o=rw"
    become: yes
  - name: copy users file
    template:
      src: templates/proxyauth.j2
      dest: "{{config_path}}.proxyauth"
      owner: "{{user}}"
      group: "{{group}}"
      mode: "u=rw,go=---"
    become: yes
  - name: create initialize files
    template:
      src: templates/3proxyinit.j2
      dest: "{{init_file}}"
      owner: "{{user}}"
      group: "{{group}}"
      mode: "u=rwx,go=r"
    become: yes
  - name: enable service
    service:
      enabled: yes
      name: "{{service_name}}"
      state: restarted
    become: yes
  - name: bind additional port to main
    iptables:
      table: nat
      chain: PREROUTING
      protocol: tcp
      destination_port: "{{additional_proxy_port}}"
      jump: REDIRECT
      to_ports: "{{proxy_port}}"
    become: yes
  - name: configure firewall(if any) for main port
    ufw:
      rule: allow
      port: "{{proxy_port}}"
    become: yes
  - name: configure firewall(if any) for additional port
    ufw:
      rule: allow
      port: "{{additional_proxy_port}}"
    become: yes
